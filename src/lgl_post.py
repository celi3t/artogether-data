import json
import requests
import os
import csv
# import arrow
from dotenv import load_dotenv
load_dotenv()


##TODO: add field for recurring donation start date
##TODO: create 2 entries for matching donations
##TODO: check that the required fields are provided?? 

def create_request_line(data):
  ## e.g. returns ?first_name=Hello&last_name=ThisIsCeleste&email=email@email.com&.... etc
  m = []
  for field in data:
    m.append(field + "=" + str(data[field]))
  return "?" + "&".join(m)


def post_message(data):
  payload = {}
  files = {}
  headers= {}
  #url = 'https://artogether.littlegreenlight.com/integrations/c0af1c57-2868-43cf-b10f-b77ef90b6bdf/listener'
  url = os.environ.get("donations_url")
  print("printing webhook url")
  print(url)
  print("message:")
  print(create_request_line(data))
  response = requests.request("POST", url + create_request_line(data), headers=headers, data = payload, files = files)
  print(response.text.encode('utf8'))


# Will need this to add as recurring_donation_start_month 
def get_start_month(datestring):
  # d = arrow.get(datestring)
  return "2020-06"#d.year + '-' + d.month


def send_all_data(datapath, headerline = 4):
  with open(datapath) as csvfile:
    csvfile = csv.reader(csvfile, delimiter=',', quotechar='"')
    for l, sline in enumerate(csvfile):
      if len(sline) == 0:
        pass
      elif sline[0].startswith("---") or sline[0].startswith("Content") or len(sline) < 2:
        pass
      elif l == headerline:
        header = sline
        #just check that the fields in the csv file are in the expected order, and that are not mismatching
        # assert(line.startswith("first_name,last_name,phone_number,address1,address2,city,postal_code,country,employer,primary_contact,preferred_contact_method,notes,date,gift_amount,matched_amount,donation_amount,gift_status,payment_status,gift_category,recurring_start_date,campaign,initiative,event,data_source))
      else:
        data = {}
        for i in range(len(sline)):
          data[header[i]] = sline[i] 
        #the donor ID is concat of name and email (it is also automatically generated by LGL)
        data["donor_id"] = data["first_name"] + data["last_name"] + data["email"]
        #the donation ID is just concat of first_name,last_name,email,amount,payment_date
        data["donation_id"] = data["donor_id"] + data["gift_amount"] + data["date"] + data["payment_status"]
        # print(data)
        post_message(data)


if __name__ == '__main__':
  ## Test missing data ok
  send_all_data("/Users/ctretto/artogether/artogether-data/src/data/testfields.csv", 0)
  ## Test same donor, different phone number ok
  ## Test same donor, no phone number the second time ok
  ## Test merging same donor into 1 yeeeeaaaa you can do it from LGL duplicate finder 


  


